// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ProductType {
  WEBAPP
  PROMPT
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  SOLD
}

// 通貨の種類を表す列挙型
enum Currency {
  JPY  // 日本円
  USD  // 米ドル
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  name         String
  role         UserRole     @default(USER)
  refreshToken String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  products     Product[]
  transactions Transaction[]
  userProducts UserProduct[]
}

model Product {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  title         String
  price         Float                           // 価格の値（数値のみ）
  currency      Currency       @default(JPY)    // 通貨の種類（円またはドル）
  description   String
  features      String?
  type          ProductType    @default(PROMPT)
  status        ProductStatus  @default(DRAFT)
  demoUrl       String?        // WebアプリのデモURL（オプション）
  promptCount   Int?           // プロンプトの数（オプション）
  prompts       Prompt[]       // Prompt モデルとのリレーション
  imageUrls     String[]       // アップロードされた画像のURL

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  transactions  Transaction[]
  userProducts  UserProduct[] 
}


model Prompt {
  id           Int       @id @default(autoincrement())
  productId    Int
  product      Product   @relation(fields: [productId], references: [id])
  input        String
  output       String
  imageUrl     String?
}

model Transaction {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  productId   Int
  product     Product      @relation(fields: [productId], references: [id])
  amount      Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UserProduct {
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@id([userId, productId])
}
