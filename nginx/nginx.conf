# ユーザーとワーカープロセスの設定
user  nginx;  # nginxプロセスを実行するユーザーを指定。デフォルトでnginxユーザーとして実行することでセキュリティを向上させる。
worker_processes  1;  # 同時に実行するワーカープロセスの数。システムのCPUコア数に応じて最適化することが推奨されるが、ここでは1に設定。

# エラーログとプロセスIDファイルの設定
error_log  /var/log/nginx/error.log warn;  # エラーログファイルのパスとログレベルを指定。エラーを迅速に発見し、問題のトラブルシューティングを行うため。
pid        /var/run/nginx.pid;  # nginxのプロセスIDを記録するファイルのパス。プロセス管理のために必要。

# イベントの設定
events {
    worker_connections 1024;  # 各ワーカープロセスが処理できる最大接続数。多数のクライアント接続を効率的に処理するために設定。
}

# HTTPサーバーの設定
http {
    include       /etc/nginx/mime.types;  # MIMEタイプの定義を含める。適切なMIMEタイプを設定することで、ブラウザがリソースを正しく解釈できるようにするため。
    default_type  application/octet-stream;  # デフォルトのMIMEタイプを設定。ファイルの種類がわからない場合に使用する。

    # ログフォーマットの設定
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';  # アクセスログの形式を指定。トラフィック解析やデバッグに利用するため。

    access_log  /var/log/nginx/access.log  main;  # アクセスログのパスとログフォーマットを指定。サーバーの利用状況を監視するために重要。

    sendfile        on;  # ファイル送信を最適化する設定。パフォーマンスを向上させるためにsendfileを使用。
    #tcp_nopush     on;  # 送信時のTCP最適化。コメントアウトされているが、データ送信を最適化する際に有効にできる。

    keepalive_timeout  65;  # クライアントとの接続を保持する秒数。接続が長すぎるとサーバーリソースを浪費するため、適切なタイムアウトを設定。

    # Gzip設定
    gzip on;  # Gzip圧縮を有効にする。トラフィックを削減し、クライアントへのレスポンス時間を短縮するため。
    gzip_disable "msie6";  # 古いInternet Explorer（IE6）ではGzipを無効にする。互換性の問題を避けるため。

    include /etc/nginx/conf.d/*.conf;  # 他の設定ファイルを含める。モジュール化と設定の整理のために使用。

    # HTTPサーバーブロック（ポート80でのリクエスト処理）
    server {
        listen 80;  # ポート80でリクエストを受け付ける。HTTPプロトコル用に設定。
        server_name yourdomain.com www.yourdomain.com;  # サーバー名（ドメイン）を指定。このサーバーブロックが特定のドメインに対して応答するようにするため。

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;  # certbotのチャレンジファイルが置かれるディレクトリ。Let's Encryptのドメイン認証用。
        }

        location / {
            return 301 https://$host$request_uri;  # すべてのHTTPリクエストをHTTPSにリダイレクト。セキュリティを向上させるために全ての通信を暗号化。
        }
    }

    # HTTPSサーバーブロック（ポート443でのリクエスト処理）
    server {
        listen 443 ssl;  # ポート443でSSLリクエストを受け付ける。HTTPSプロトコル用に設定。
        server_name yourdomain.com www.yourdomain.com;  # サーバー名（ドメイン）を指定。このサーバーブロックが特定のドメインに対して応答するようにするため。

        ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;  # SSL証明書のパスを指定。HTTPS通信を可能にするための証明書。
        ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;  # SSL証明書の秘密鍵のパスを指定。証明書の暗号化・復号化に使用。

        ssl_protocols TLSv1.2 TLSv1.3;  # 使用するSSLプロトコルのバージョンを指定。古い脆弱なプロトコルを排除し、セキュリティを向上させるため。
        ssl_ciphers HIGH:!aNULL:!MD5;  # 使用する暗号スイートを指定。安全でない暗号化アルゴリズムを除外し、強力な暗号化を使用するため。

        location / {
            proxy_pass http://frontend:3000;  # フロントエンドサーバーにリクエストを転送。フロントエンドのサービスに負荷を分散し、バックエンドの直接アクセスを防ぐため。
            proxy_set_header Host $host;  # オリジナルのホストヘッダーを設定。バックエンドにオリジナルのリクエスト情報を渡すため。
            proxy_set_header X-Real-IP $remote_addr;  # クライアントのIPアドレスを設定。バックエンドでクライアントの実際のIPアドレスを使用するため。
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # プロキシ経由の元のIPアドレスを設定。クライアントの経由情報を保持するため。
            proxy_set_header X-Forwarded-Proto $scheme;  # リクエストのプロトコル（HTTP/HTTPS）を設定。バックエンドで元のプロトコル情報を取得するため。
        }

        location /api/ {
            proxy_pass http://backend:3001;  # バックエンドサーバーにリクエストを転送。APIリクエストをバックエンドにルーティングし、処理を分担するため。
            proxy_set_header Host $host;  # オリジナルのホストヘッダーを設定。バックエンドにオリジナルのリクエスト情報を渡すため。
            proxy_set_header X-Real-IP $remote_addr;  # クライアントのIPアドレスを設定。バックエンドでクライアントの実際のIPアドレスを使用するため。
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # プロキシ経由の元のIPアドレスを設定。クライアントの経由情報を保持するため。
            proxy_set_header X-Forwarded-Proto $scheme;  # リクエストのプロトコル（HTTP/HTTPS）を設定。バックエンドで元のプロトコル情報を取得するため。
        }
    }
}